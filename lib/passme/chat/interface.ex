defmodule Passme.Chat.Interface do
  @moduledoc false

  @spec record_link(Passme.Chat.Storage.Record) :: {String.t(), Keyword.t()}
  def record_link(record) do
    {
      "/r\\_#{record.id}",
      [parse_mode: "Markdown"]
    }
  end

  def record(record) do
    text = "
Detailed record:
=================================

Name: #{record.name}
Value: #{record.value}
Key: #{record.key}
Description: #{record.desc}

Created by [user](tg://user?id=#{record.author})

Edit record:
    "

    key_text =
      if is_nil(record.key) do
        "‚ûï Add key"
      else
        "‚úèÔ∏è Edit key"
      end

    desc_text =
      if is_nil(record.desc) do
        "‚ûï Add description"
      else
        "‚úèÔ∏è Edit description"
      end

    {
      text,
      [
        parse_mode: "Markdown",
        reply_markup: %ExGram.Model.InlineKeyboardMarkup{
          inline_keyboard: [
            [
              %ExGram.Model.InlineKeyboardButton{
                text: "‚úèÔ∏è Edit name",
                callback_data: "record_edit_name_#{record.id}"
              },
              %ExGram.Model.InlineKeyboardButton{
                text: "‚úèÔ∏è Edit value",
                callback_data: "record_edit_value_#{record.id}"
              }
            ],
            [
              %ExGram.Model.InlineKeyboardButton{
                text: "‚ùå Delete",
                callback_data: "record_action_delete_#{record.id}"
              },
              %ExGram.Model.InlineKeyboardButton{
                text: key_text,
                callback_data: "record_edit_key_#{record.id}"
              },
              %ExGram.Model.InlineKeyboardButton{
                text: desc_text,
                callback_data: "record_edit_desc_#{record.id}"
              }
            ]
          ]
        }
      ]
    }
  end

  def list(records) do
    text =
      records
      |> Enum.filter(fn
        {_id, v} -> is_nil(v.archived)
      end)
      |> Enum.reduce("", fn
        {_id, v}, acc ->
          {link, _} = record_link(v)
          acc <> "\nüìã Key: #{v.key}\n`Full record =>` #{link}\n"
      end)
      |> case do
        "" -> "List is empty"
        string -> "List of entries:" <> string
      end

    {
      text,
      parse_mode: "Markdown"
    }
  end

  def start() do
    {
      "
–ë–æ—Ç —É–º–µ–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –ø—Ä–∏ —ç—Ç–æ–º –æ–±—Ä–∞—â–∞—è—Å—å –∫ –∑–∞–ø–∏—Å–∏ - –±–æ—Ç
–æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è –∑–∞–ø–∏—Å–∏ –º–æ–∂–Ω–æ –ª–∏ –µ–µ –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø—Ä–æ—Å–∏–≤—à–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–º–∞–Ω–¥:",
      [
        parse_mode: "Markdown",
        reply_markup: %ExGram.Model.InlineKeyboardMarkup{
          inline_keyboard: [
            [
              %ExGram.Model.InlineKeyboardButton{
                text: "üóÑ –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π",
                callback_data: "list"
              }
            ],
            [
              %ExGram.Model.InlineKeyboardButton{
                text: "üìù –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å",
                callback_data: "new_record"
              }
            ]
          ]
        }
      ]
    }
  end

  @spec not_in_conversation(map()) :: {String.t(), Keyword.t()}
  def not_in_conversation(%{username: username}) do
    {
      "@#{username}
–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø–∏—Å—è–º–∏ –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç
      ",
      []
    }
  end

  @spec script_step(Passme.Chat.Script.Step, boolean()) :: {binary(), Keyword.t()}
  def script_step(step, optional \\ false) do
    keyboard = [
      %ExGram.Model.InlineKeyboardButton{
        text: "Cancel script",
        callback_data: "script_abort"
      }
    ]

    keyboard =
      if optional do
        button = %ExGram.Model.InlineKeyboardButton{
          text: "Clear value",
          callback_data: "script_step_clean"
        }

        [button | keyboard]
      else
        keyboard
      end

    {
      step.text,
      [
        parse_mode: "Markdown",
        reply_markup: %ExGram.Model.InlineKeyboardMarkup{
          inline_keyboard: [
            keyboard
          ]
        }
      ]
    }
  end
end
